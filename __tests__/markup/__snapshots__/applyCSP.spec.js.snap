// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`for inline tags and given sha256 it should inject a sha256+base64 source for each 1`] = `
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta http-equiv="Content-Security-Policy"
          content="script-src 'sha256-tuIk8UMM5VK6Dn8Jn3ePSolo3YszPi+JeJrdzrOshsw=' 'sha256-qnFkTcuoAp6oO1RZJy6aN/9o3iansAMJSx0ZLqbk/JY='; style-src 'sha256-nMd1F/LMKzbEm8mWbcTNC6Ifar1sutAMJJ1uqhvJ/c8=' 'sha256-hEATX7sUZolX9HQYaQ+sSRbknzWRnW8y7ZPdFlbaYd0='"
    >
    <title>
      Fake Title
    </title>
    <script>
      const a=1;
    </script>
    <style>
      div {
        css: sucks;
      }
    </style>
  </head>
  <body>
    <script>
      const b=1;
    </script>
    <style>
      div {
        css: is-bad;
      }
    </style>
  </body>
</html>
`;

exports[`for inline tags and given sha384 it should inject a sha384+base64 source for each 1`] = `
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta http-equiv="Content-Security-Policy"
          content="script-src 'sha384-uZT+XtG7RuJtephpOtu6rJHWMo4jkDXqF7zpKllBBnBCUDGEC1EAfUxa9mE7cdcb' 'sha384-xVuC9/ZsdCoMmOnFcN5205oZDIqRbOd7bcqNv7xyKsr7vgg1gh3MAc8MehJbJGBI'; style-src 'sha384-nPNwinjybwk0/Dyw1k3bDabl4blBnQ27bv67RSyTqgTlx+E4NK3N3kWmLjNab09K' 'sha384-2NucM7fXDV2sNuEglrlIpvSY6a3M2wNOzuw7Qjg7+J3hN5Lw8JG3SSLsSRwqWL6+'"
    >
    <title>
      Fake Title
    </title>
    <script>
      const a=1;
    </script>
    <style>
      div {
        css: sucks;
      }
    </style>
  </head>
  <body>
    <script>
      const b=1;
    </script>
    <style>
      div {
        css: is-bad;
      }
    </style>
  </body>
</html>
`;

exports[`for inline tags and given sha512 it should inject a sha512+base64 source for each 1`] = `
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta http-equiv="Content-Security-Policy"
          content="script-src 'sha512-/558eYLHKn8YKWknLoF5RvQwEOb05/pU4pFSzvN/0FW5vPSlHYILUisxdm/C5Ss1yQwD80DMaYASRhhK7JfArw==' 'sha512-2DIFEephSKwxrINwes/H9aLafWq5GfOZtEZUVP9gJD5qSLiazykCqpXu0cIX+ZholB5xAfT4wnfAhiVsBuy+Lg=='; style-src 'sha512-lmCFcZx5gkRkUB18igbCihWI/zlKQs0pbn6BEmtWQz01pCYA/anuvUrPSbMXiQtqBLkg7/cusKnL9VUdKwJyhw==' 'sha512-U7SEuKqtMdgBKGjsCu7ShMTmOIPyk4BH9L/L3WHSlCmJwcpTB2BxLN5O72tsgtHuvmoglf8ySNmNuaG7iavYiA=='"
    >
    <title>
      Fake Title
    </title>
    <script>
      const a=1;
    </script>
    <style>
      div {
        css: sucks;
      }
    </style>
  </head>
  <body>
    <script>
      const b=1;
    </script>
    <style>
      div {
        css: is-bad;
      }
    </style>
  </body>
</html>
`;

exports[`for inline tags given inline scripts, styles and additional policies should merge content hashes, and apply policies 1`] = `
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta http-equiv="Content-Security-Policy"
          content="style-src https://policy-foo-style.com 'sha256-nMd1F/LMKzbEm8mWbcTNC6Ifar1sutAMJJ1uqhvJ/c8=' 'sha256-hEATX7sUZolX9HQYaQ+sSRbknzWRnW8y7ZPdFlbaYd0='; script-src https://policy-foo-script.com 'sha256-tuIk8UMM5VK6Dn8Jn3ePSolo3YszPi+JeJrdzrOshsw=' 'sha256-qnFkTcuoAp6oO1RZJy6aN/9o3iansAMJSx0ZLqbk/JY='; default-src https://policy-foo-default.com"
    >
    <title>
      Fake Title
    </title>
    <script>
      const a=1;
    </script>
    <style>
      div {
        css: sucks;
      }
    </style>
  </head>
  <body>
    <script>
      const b=1;
    </script>
    <style>
      div {
        css: is-bad;
      }
    </style>
  </body>
</html>
`;

exports[`for inline tags when disabled should not generate hashes (but still apply other policies) 1`] = `
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta http-equiv="Content-Security-Policy"
          content="style-src https://policy-foo-style.com; script-src https://policy-foo-script.com; default-src https://policy-foo-default.com"
    >
    <title>
      Fake Title
    </title>
    <script>
      const a=1;
    </script>
    <style>
      div {
        css: sucks;
      }
    </style>
  </head>
  <body>
    <script>
      const b=1;
    </script>
    <style>
      div {
        css: is-bad;
      }
    </style>
  </body>
</html>
`;

exports[`given frontmatter mode=[default] (merge) should merge the frontmatter and return the markup 1`] = `
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta http-equiv="Content-Security-Policy"
          content="default-src https://config-foo-default.com https://frontmatter-foo-default.com; img-src https://config-foo-img.com https://frontmatter-foo-img.com"
    >
    <title>
      Fake Title
    </title>
  </head>
  <body>
  </body>
</html>
`;

exports[`given frontmatter mode=merge should merge the frontmatter and return the markup 1`] = `
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta http-equiv="Content-Security-Policy"
          content="default-src https://config-foo-default.com https://frontmatter-foo-default.com; img-src https://config-foo-img.com https://frontmatter-foo-img.com"
    >
    <title>
      Fake Title
    </title>
  </head>
  <body>
  </body>
</html>
`;

exports[`given frontmatter mode=replace should replace the config with the frontmatter and return the markup 1`] = `
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta http-equiv="Content-Security-Policy"
          content="default-src https://frontmatter-foo-default.com; img-src https://frontmatter-foo-img.com"
    >
    <title>
      Fake Title
    </title>
  </head>
  <body>
  </body>
</html>
`;

exports[`given valid args should apply only the corresponding polices for that path (foo/index.html 1`] = `
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta http-equiv="Content-Security-Policy"
          content="default-src https://config-foo-default.com https://frontmatter-foo-default.com"
    >
    <title>
      Fake Title
    </title>
  </head>
  <body>
  </body>
</html>
`;

exports[`given valid args should return the markup with CSP applied 1`] = `
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta http-equiv="Content-Security-Policy"
          content="default-src 'self' https://foo.com; img-src https://bar.com"
    >
    <title>
      Fake Title
    </title>
  </head>
  <body>
  </body>
</html>
`;
